{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# An introduction to Altar2 framework - from a Linear Model example\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we use a linear model to demonstrate the AlTar framework. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Introduction\n",
    "\n",
    "AlTar solves inverse problem by Bayesian inference with [CATMIP](https://thesis.library.caltech.edu/5918/) algorithm. \n",
    "\n",
    "A forward model can be defined as $d=G(\\theta)$, where $\\theta$ is a set of parameters, $d$ is a set of predicted observations, and $G$ is the forward function(s) to calculate $d$ from a given $\\theta$. For example, in a linear model, ${\\vec d} = {\\bf G} {\\vec \\theta}$, the Green's function ${\\bf G}$ is a two-dimension matrix of the size (observations, parameters). In an inverse problem, one knows a set of observations $d$ and wants to calculate the parameters $\\theta$ that produced them, or $\\theta = G^{-1} (d)$. In most cases, $G$ is not directly inversible. \n",
    "\n",
    "We resort to the Bayesian inference method, which follows the Bayes' theorem:\n",
    "$P(\\theta|d) =  P(d|\\theta) P(\\theta)/P(d)$, i.e., the (posterior) probability of observing $\\theta$ for a given $d$ is proportional to the (data likelihood) probability of observing $d$ for a given $\\theta$ and the (prior) probablity of $\\theta$ before taking the observation into account. $P(d|\\theta)$ can be easily computed by the available forward model. One therefore samples the posterior distribution $P(\\theta|d)$ over the $\\theta$ parameter space, which provides a statistical solution for $\\theta$ from its probability to produce the observed data $d$. \n",
    "(we take $P(d)=1$ in the following as it is the same for all $\\theta$ being sampled in the process.)    \n",
    "\n",
    "Such a statistical approach can also incorporate various uncertainies in reality, such as data collection errors, forward model uncertainties, which are not possible to include in the direct inverse method. \n",
    "\n",
    "CATMIP is a Markov-Chain Monte-Carlo (MCMC) method to sample the posterior distribution $P(\\theta|d)$. It introduces an annealing process with transient distributions $P_m(\\theta|d) =  [P(d|\\theta)]^{\\beta_m} P(\\theta)$ and $\\beta_m$ increasing from 0 to 1, i.e., to gradully equilibrate the samples $\\theta$ being initialized from the prior to the desired posterior distribution.  \n",
    "\n",
    "AlTar provides a framework for the above computation. It is based on the component-based programming by the pyre framework. The main components in an AlTar application are as follows, \n",
    "- Controller(default=annealer), which performs the MCMC simulation as prescribed by CATMIP. It also contains several components\n",
    "    - Worker, which can be configured to run with single thread(default), multiple threads, CPU or GPU, and also keeps record of the simulation data such as $\\theta$, prior/likelihood/posterior probabilities (in a CoolingStep object).\n",
    "    - Sampler, which provides the sample updating process. The default sampler uses a Gaussian proposal and the Metropolis–Hastings algorithm for deciding acceptance/rejection of proposed samples. \n",
    "    - Scheduler, which controls the annealing schedule (how $\\beta$ evolves from 0 to 1). The default scheduler is based on the Coefficient of Variance (COV), adjusted to maintain 50% the effective sample size. \n",
    "- Model, which controls the data likelihood computation from a prescribed forward model and a set of observed data. Several geophysical models are included in the package. Users can also develop their own models to take advantage of the Bayesian framework. \n",
    "- Job, for users to configure the size of the simulations, such as the number of chains, the number of threads, whether to use GPU. \n",
    "- Rng, the random number generator to be used in other components.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.  Create an AlTar application for Linear Model\n",
    "\n",
    "The forward model of the linear model is ${\\vec d} = {\\bf G} {\\vec m}$. We create a dedicated AlTar application for it as follows (users can also use the default altar application while specifying `model=altar.models.linear` in the configuration file),"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import altar\n",
    "import altar.models.linear\n",
    "\n",
    "# make a specialized app that uses the linear model by default\n",
    "class LinearApp(altar.shells.altar, family='altar.applications.linear'):\n",
    "    \"\"\"\n",
    "    A specialized AlTar application that exercises the Linear model\n",
    "    \"\"\"\n",
    "    # user configurable component\n",
    "    model = altar.models.model(default='linear')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Users can use a pyre-config file to set various attributes/components in an AlTar application.  If the settings are not present, default values will be used. For example, we use [linear.pfg](linear.pfg) below for the linear model.\n",
    "\n",
    "```\n",
    ";\n",
    "; michael a.g. aïvázis\n",
    "; orthologue\n",
    "; (c) 1998-2019 all rights reserved\n",
    ";\n",
    "\n",
    "; the application\n",
    "; the name should be the same as the AlTar application instance (name='linear')\n",
    "linear:\n",
    "    ; the model configuration\n",
    "    model:\n",
    "        ; the name of the test case, also as the directory for input files\n",
    "        case = patch-9\n",
    "        ; the number of free parameters\n",
    "        parameters = 18\n",
    "        ; the number of observations\n",
    "        observations = 108\n",
    "\n",
    "        ; data observations\n",
    "        data = data.txt\n",
    "        \n",
    "        ; data covariance/uncertainties\n",
    "        cd = cd.txt\n",
    "        \n",
    "        ; Green's function \n",
    "        green = green.txt\n",
    "        \n",
    "        ; prior distribution for parameters\n",
    "        ; use a prep distribution to initialize samples, if different\n",
    "        prep:\n",
    "            ; default distribution is gaussian\n",
    "            parameters = {linear.model.parameters}\n",
    "            center = 0.1\n",
    "            sigma = 0.6\n",
    "\n",
    "        ; prior distribution to compute prior\n",
    "        prior:\n",
    "            parameters = {linear.model.parameters}\n",
    "            center = 0.0\n",
    "            sigma = 0.5\n",
    "\n",
    "    ; run configuration\n",
    "    job.tasks = 1 ; number of tasks per host\n",
    "    job.gpus = 0  ; number of gpus per task\n",
    "    job.chains = 2**10 ; number of chains per task\n",
    "\n",
    "\n",
    "; end of file\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Create an instance and have a test run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "altar: iteration: 0, beta: 0, scaling: 0.3\n",
      "altar: stats(accepted/invalid/rejected): (0, 0, 0)\n",
      "altar: step\n",
      "  β: 0\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.018337881631437083, 0.5052453298270653)\n",
      "   (0.014805859520560022, 0.4766894664140216)\n",
      "   (-0.01462564513078194, 0.5081654158571511)\n",
      "   (-0.002355673369142845, 0.5081162163836722)\n",
      "   (-0.04118865774270952, 0.5073394241501916)\n",
      "   (0.0017552032804668066, 0.5083596919672608)\n",
      "   (-0.0020480581810896586, 0.49203214603015305)\n",
      "   (0.006802537886870903, 0.5050897094148948)\n",
      "   (0.019792637990626735, 0.5078926959999586)\n",
      "   (-0.014077530688462712, 0.5285959116127767)\n",
      "   (-0.01637361479187935, 0.5061220237476346)\n",
      "   (0.009529041379845204, 0.4866321830486042)\n",
      "   (0.0005823928357463203, 0.5064351771426218)\n",
      "   (0.018808766714457793, 0.4980890641425079)\n",
      "   (-0.006404183895994609, 0.5022449427854057)\n",
      "   (-0.0036295692679261067, 0.5065645469133183)\n",
      "   (0.013157615041441287, 0.5009381741599271)\n",
      "   (0.0076002730544208795, 0.48574849817155236)\n",
      "resampling: unique samples 491 out of 1024\n",
      "altar: iteration: 1, beta: 0.000152, scaling: 0.5862847222222222\n",
      "altar: stats(accepted/invalid/rejected): (10948, 0, 9532)\n",
      "altar: step\n",
      "  β: 0.000152\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.028676633427721913, 0.4661978870718859)\n",
      "   (0.02649350767224517, 0.49319665420624786)\n",
      "   (0.014195843209434199, 0.4906533622730879)\n",
      "   (0.026924916481980286, 0.44761863764957877)\n",
      "   (-0.02575175383591173, 0.5043045944176819)\n",
      "   (0.02865493135017975, 0.48668750449548526)\n",
      "   (0.03135264531208115, 0.46726679579706853)\n",
      "   (0.013663491131162454, 0.48496252260721784)\n",
      "   (0.027493816296776167, 0.4834902234726608)\n",
      "   (0.24588782231711923, 0.4787607447259501)\n",
      "   (0.10490131937681525, 0.4685581131707325)\n",
      "   (0.07094626889536143, 0.47884017832206216)\n",
      "   (0.10080363832999412, 0.5002808471944974)\n",
      "   (0.16847745333025024, 0.5065637753989104)\n",
      "   (0.03483305083499414, 0.49221949721785596)\n",
      "   (0.24028260697182738, 0.4707606222156741)\n",
      "   (0.17886517285381945, 0.4812373506380423)\n",
      "   (0.031527310313312996, 0.4791188544967582)\n",
      "resampling: unique samples 519 out of 1024\n",
      "altar: iteration: 2, beta: 0.00036696732, scaling: 0.3279513888888889\n",
      "altar: stats(accepted/invalid/rejected): (4996, 0, 15484)\n",
      "altar: step\n",
      "  β: 0.00036696732\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.06430842950927515, 0.4452839000019507)\n",
      "   (0.05152179920017437, 0.47992403523164423)\n",
      "   (0.043557535300557525, 0.4822701547732041)\n",
      "   (0.08933389705027309, 0.4111520999590727)\n",
      "   (0.0025364491545699836, 0.4783940639196693)\n",
      "   (0.041256431746379156, 0.456027924354843)\n",
      "   (0.058769294366385005, 0.42423074568341806)\n",
      "   (0.0053821634653339, 0.491588743155336)\n",
      "   (0.012293728690114422, 0.4842888527936366)\n",
      "   (0.3984988852495371, 0.42345743247000084)\n",
      "   (0.26586051182509407, 0.46447724795863965)\n",
      "   (0.10858480426148388, 0.4794113621329104)\n",
      "   (0.18392791592291896, 0.47823057723360296)\n",
      "   (0.3090345949534557, 0.484447027809182)\n",
      "   (0.07373035885297215, 0.4734652357975846)\n",
      "   (0.42576718005066116, 0.4381141054809995)\n",
      "   (0.3228289098818816, 0.46113663395219423)\n",
      "   (0.08371424979800747, 0.5063069540382498)\n",
      "resampling: unique samples 515 out of 1024\n",
      "altar: iteration: 3, beta: 0.0006568608994772, scaling: 0.5607204861111111\n",
      "altar: stats(accepted/invalid/rejected): (10359, 0, 10121)\n",
      "altar: step\n",
      "  β: 0.0006568608994772\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.06730427644625027, 0.3991570599787552)\n",
      "   (0.054171023136960865, 0.4759402145940272)\n",
      "   (0.07521240702760465, 0.4707900973370123)\n",
      "   (0.13755705713885483, 0.3836385266230893)\n",
      "   (0.011106513619524803, 0.4667968280838141)\n",
      "   (0.09770983270063471, 0.4224646496347209)\n",
      "   (0.1277744741700336, 0.3940497458262799)\n",
      "   (0.008389190344330333, 0.4623387396039417)\n",
      "   (0.045848054047887325, 0.4505828938915713)\n",
      "   (0.5412261789183014, 0.4010757212994735)\n",
      "   (0.4247241053032638, 0.47118065478195803)\n",
      "   (0.17610658498353604, 0.4751396532213656)\n",
      "   (0.2689508261196125, 0.47700104906869095)\n",
      "   (0.39226256510466717, 0.47452166605538015)\n",
      "   (0.12250811657068451, 0.48939280269830276)\n",
      "   (0.5883201392523407, 0.41077187395386033)\n",
      "   (0.4474215352246556, 0.4516659206556815)\n",
      "   (0.15212604167054677, 0.48850515907416336)\n",
      "resampling: unique samples 529 out of 1024\n",
      "altar: iteration: 4, beta: 0.0010466047237264041, scaling: 0.34401041666666665\n",
      "altar: stats(accepted/invalid/rejected): (5366, 0, 15114)\n",
      "altar: step\n",
      "  β: 0.0010466047237264041\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.0781637867713033, 0.37946605806325795)\n",
      "   (0.036180222105524636, 0.4624059718120898)\n",
      "   (0.07595222778882162, 0.4565306325286752)\n",
      "   (0.14337170271266345, 0.35631946592539365)\n",
      "   (0.05499133053477938, 0.45992662646782917)\n",
      "   (0.13948143423305773, 0.37896685766277677)\n",
      "   (0.15840089563499388, 0.3662684358014715)\n",
      "   (0.060897638630698386, 0.48859817490404384)\n",
      "   (0.049710082349821196, 0.44663841496430545)\n",
      "   (0.6995894493586415, 0.37110218643681264)\n",
      "   (0.5446598542728511, 0.42564949090757276)\n",
      "   (0.22434646630774782, 0.4760910099017619)\n",
      "   (0.3470566014895832, 0.48591324941711816)\n",
      "   (0.4736918776291022, 0.4334059572995466)\n",
      "   (0.22279042794692083, 0.48823154891499687)\n",
      "   (0.7390720217881203, 0.37831897344398563)\n",
      "   (0.5054987036741215, 0.4307866294524524)\n",
      "   (0.22426309180213666, 0.4618095527774268)\n",
      "resampling: unique samples 505 out of 1024\n",
      "altar: iteration: 5, beta: 0.0016459767608921682, scaling: 0.5423177083333334\n",
      "altar: stats(accepted/invalid/rejected): (9935, 0, 10545)\n",
      "altar: step\n",
      "  β: 0.0016459767608921682\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.08484925791152481, 0.3392818571379875)\n",
      "   (0.046223229053878594, 0.47433489995660694)\n",
      "   (0.0924465342009616, 0.4276961475744531)\n",
      "   (0.153040998271941, 0.3135637184006295)\n",
      "   (0.09307983427171113, 0.4483027136769017)\n",
      "   (0.13754619043150398, 0.36064158689959547)\n",
      "   (0.17977441015777249, 0.3357727944944509)\n",
      "   (0.0924819191690415, 0.4770110045843617)\n",
      "   (0.049376701106971156, 0.4364001975438331)\n",
      "   (0.8269338600768099, 0.33704721495466466)\n",
      "   (0.6462235134479256, 0.4006511737939165)\n",
      "   (0.2659979780246277, 0.4538099429424584)\n",
      "   (0.3886006679254812, 0.47790508638647483)\n",
      "   (0.5662932430535753, 0.4496786004442714)\n",
      "   (0.25333519766132284, 0.48492955922482617)\n",
      "   (0.8251130885265302, 0.34296826605831665)\n",
      "   (0.6301336537796771, 0.4139689919947255)\n",
      "   (0.2904131780806678, 0.4553699584929785)\n",
      "resampling: unique samples 512 out of 1024\n",
      "altar: iteration: 6, beta: 0.0024746106001806278, scaling: 0.3612847222222222\n",
      "altar: stats(accepted/invalid/rejected): (5764, 0, 14716)\n",
      "altar: step\n",
      "  β: 0.0024746106001806278\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.09203381224107854, 0.30869770634881377)\n",
      "   (0.045637753707260066, 0.4610769139648856)\n",
      "   (0.12075057856537807, 0.4315669861201962)\n",
      "   (0.1476008900305953, 0.2952229474974433)\n",
      "   (0.100579716667759, 0.4586259304966932)\n",
      "   (0.15142597541110722, 0.32962356222615413)\n",
      "   (0.19244927624423505, 0.3032969028134646)\n",
      "   (0.1000021661489916, 0.4364353636114955)\n",
      "   (0.055503475617355746, 0.4177207952853854)\n",
      "   (0.9153160846453254, 0.3133953571170953)\n",
      "   (0.7290013772945501, 0.37944446514480906)\n",
      "   (0.3359240996184624, 0.4451151818448109)\n",
      "   (0.44573552883903994, 0.47070997756985117)\n",
      "   (0.6761547538893973, 0.44454526225859364)\n",
      "   (0.31616958489381963, 0.46940213968064454)\n",
      "   (0.9194117129087485, 0.32253654284663374)\n",
      "   (0.7208191346610415, 0.3967816373466015)\n",
      "   (0.32363576191247384, 0.46228988072910027)\n",
      "resampling: unique samples 507 out of 1024\n",
      "altar: iteration: 7, beta: 0.003711542083036404, scaling: 0.5198784722222222\n",
      "altar: stats(accepted/invalid/rejected): (9418, 0, 11062)\n",
      "altar: step\n",
      "  β: 0.003711542083036404\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.08112025898669097, 0.27114249865622725)\n",
      "   (0.022364273562725134, 0.4556534675494358)\n",
      "   (0.12811202257987264, 0.39859197405507435)\n",
      "   (0.17441117647372573, 0.2569226191692614)\n",
      "   (0.13311502280881884, 0.46026398876904545)\n",
      "   (0.1878522772558563, 0.3244409452936714)\n",
      "   (0.19318832260733795, 0.2787624763292982)\n",
      "   (0.1258250958229245, 0.4555306704877879)\n",
      "   (0.04307435494010967, 0.41250394185884426)\n",
      "   (0.9878300770500559, 0.2917416945922071)\n",
      "   (0.7873592925060312, 0.38805537738685136)\n",
      "   (0.4398084374274587, 0.42162069550947034)\n",
      "   (0.47771807810516176, 0.46666052385145657)\n",
      "   (0.7481793610929373, 0.41902117496315766)\n",
      "   (0.38159272064375316, 0.4641068304471415)\n",
      "   (0.9987475642123522, 0.29277839479710116)\n",
      "   (0.7901088824567224, 0.390936652394206)\n",
      "   (0.39258933077892877, 0.4525102871430267)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "resampling: unique samples 528 out of 1024\n",
      "altar: iteration: 8, beta: 0.005504861307286939, scaling: 0.36840277777777775\n",
      "altar: stats(accepted/invalid/rejected): (5928, 0, 14552)\n",
      "altar: step\n",
      "  β: 0.005504861307286939\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.09405846095484405, 0.24609470724835844)\n",
      "   (0.019053710022293256, 0.4472915981662028)\n",
      "   (0.15243204242025846, 0.385493007638077)\n",
      "   (0.16179025072654382, 0.23123133586488676)\n",
      "   (0.13896167766343967, 0.44128980886950325)\n",
      "   (0.19181921339762936, 0.2835697226403683)\n",
      "   (0.22627562485692884, 0.2503086779318177)\n",
      "   (0.1310839113853568, 0.4411375662969701)\n",
      "   (0.05846397927712409, 0.37360189505526736)\n",
      "   (1.0366027875509574, 0.2775254260218594)\n",
      "   (0.8472597019711501, 0.3605345909509739)\n",
      "   (0.5048150075561069, 0.42687814315561384)\n",
      "   (0.5066343290769844, 0.47672813097723576)\n",
      "   (0.7902788421768404, 0.41926586633211366)\n",
      "   (0.46100384831310315, 0.44441240118224423)\n",
      "   (1.0392557245225889, 0.26732994560652146)\n",
      "   (0.8548133697786432, 0.37644180856190534)\n",
      "   (0.47781567870736663, 0.4260113960589317)\n",
      "resampling: unique samples 511 out of 1024\n",
      "altar: iteration: 9, beta: 0.007921484494310231, scaling: 0.5055989583333333\n",
      "altar: stats(accepted/invalid/rejected): (9089, 0, 11391)\n",
      "altar: step\n",
      "  β: 0.007921484494310231\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.10427623820895968, 0.21422867859930353)\n",
      "   (0.029186152736737303, 0.44773763323116833)\n",
      "   (0.18221449439774143, 0.35588152164044023)\n",
      "   (0.1792492457653234, 0.20177277219085005)\n",
      "   (0.1437872777772411, 0.41557563174687295)\n",
      "   (0.19031229683251802, 0.2523771091503356)\n",
      "   (0.22307233233996718, 0.21485337110448)\n",
      "   (0.1308958871653373, 0.43978345097617416)\n",
      "   (0.06252247026858611, 0.3584855608553265)\n",
      "   (1.058993678029806, 0.25250617010560333)\n",
      "   (0.8825028865855142, 0.3389249447074365)\n",
      "   (0.5885149925331696, 0.4126404723008218)\n",
      "   (0.5427372174367779, 0.4644062405466688)\n",
      "   (0.8621275779614698, 0.4056788450411018)\n",
      "   (0.555131155767872, 0.4431776014655766)\n",
      "   (1.0450579539045157, 0.24878825532629636)\n",
      "   (0.8918936100312063, 0.3491668070240632)\n",
      "   (0.5702249536112949, 0.39245707376381467)\n",
      "resampling: unique samples 515 out of 1024\n",
      "altar: iteration: 10, beta: 0.011522729505595884, scaling: 0.3810329861111111\n",
      "altar: stats(accepted/invalid/rejected): (6219, 0, 14261)\n",
      "altar: step\n",
      "  β: 0.011522729505595884\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.10750173893172206, 0.17971250781361373)\n",
      "   (0.032543545302635486, 0.43385441823729004)\n",
      "   (0.19786974455215198, 0.3338086318651547)\n",
      "   (0.17355320673197644, 0.16598020457487228)\n",
      "   (0.1484928388169697, 0.3888952545948964)\n",
      "   (0.19853623207055562, 0.23342711876050265)\n",
      "   (0.22414771103663653, 0.18774429105766438)\n",
      "   (0.17288830713683062, 0.42361546675452255)\n",
      "   (0.07737341918827421, 0.3171124274982284)\n",
      "   (1.067436535848902, 0.22205127620733345)\n",
      "   (0.9104210561402385, 0.31041318850510463)\n",
      "   (0.708483394065162, 0.38539942031529495)\n",
      "   (0.5535991772637038, 0.4831394665945476)\n",
      "   (0.8901595374273731, 0.39456094586818463)\n",
      "   (0.6325972615037998, 0.4063262907561708)\n",
      "   (1.0627862074417171, 0.22873292386391403)\n",
      "   (0.9267820892978775, 0.32280954118857574)\n",
      "   (0.6352222130585927, 0.3868647206754948)\n",
      "resampling: unique samples 523 out of 1024\n",
      "altar: iteration: 11, beta: 0.017058202220364548, scaling: 0.49947916666666664\n",
      "altar: stats(accepted/invalid/rejected): (8948, 0, 11532)\n",
      "altar: step\n",
      "  β: 0.017058202220364548\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.11974771827807523, 0.15842513547913437)\n",
      "   (0.03939957810508857, 0.4213056693055002)\n",
      "   (0.22986220940265775, 0.29974773777845953)\n",
      "   (0.1715819188024488, 0.14702048552864283)\n",
      "   (0.1557078028283383, 0.38393064649408576)\n",
      "   (0.18256401473531872, 0.20347742400519397)\n",
      "   (0.2189210804780063, 0.16705926535470048)\n",
      "   (0.1811925030490336, 0.4005503301008226)\n",
      "   (0.0772304027652588, 0.29775777460348574)\n",
      "   (1.0631043880928333, 0.1999322649384311)\n",
      "   (0.9396363168316384, 0.2856931824340279)\n",
      "   (0.7560481013443694, 0.36122509486164256)\n",
      "   (0.5799428970848259, 0.4659429353449663)\n",
      "   (0.9270712993327579, 0.3651871208249516)\n",
      "   (0.7360024082917345, 0.4058982916840769)\n",
      "   (1.0591098344819434, 0.20901481499496344)\n",
      "   (0.9597895893919247, 0.2947946812045384)\n",
      "   (0.6990702851220106, 0.36625945652801634)\n",
      "resampling: unique samples 522 out of 1024\n",
      "altar: iteration: 12, beta: 0.02521661914193552, scaling: 0.38185763888888885\n",
      "altar: stats(accepted/invalid/rejected): (6238, 0, 14242)\n",
      "altar: step\n",
      "  β: 0.02521661914193552\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.12438640417948299, 0.1370494708359024)\n",
      "   (0.05546723422842907, 0.4029678485297288)\n",
      "   (0.23531017979416785, 0.2835565709908885)\n",
      "   (0.1752099155430952, 0.1188938983916044)\n",
      "   (0.13533188378540084, 0.3701863636344794)\n",
      "   (0.19138962885226465, 0.18374995419520362)\n",
      "   (0.2173296894604999, 0.13623377436780923)\n",
      "   (0.20723751584251035, 0.3909094979279481)\n",
      "   (0.09217645086510223, 0.2768093999709659)\n",
      "   (1.0452885478675964, 0.1903271255401074)\n",
      "   (0.9627429655224016, 0.26878560051067657)\n",
      "   (0.803842997713328, 0.35837594100813025)\n",
      "   (0.5865993672232953, 0.44280190278633685)\n",
      "   (0.9739733088082174, 0.3379055528381218)\n",
      "   (0.8196757250910751, 0.40245701512884213)\n",
      "   (1.0556673985446319, 0.18555643321744775)\n",
      "   (0.9682131134833971, 0.27946125317423665)\n",
      "   (0.7643821425467048, 0.34010599724024515)\n",
      "resampling: unique samples 507 out of 1024\n",
      "altar: iteration: 13, beta: 0.03662158469797487, scaling: 0.4906684027777778\n",
      "altar: stats(accepted/invalid/rejected): (8745, 0, 11735)\n",
      "altar: step\n",
      "  β: 0.03662158469797487\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1251695340532644, 0.12190053719774946)\n",
      "   (0.06414252036824825, 0.37727292937167994)\n",
      "   (0.23924701742246313, 0.2494679082444192)\n",
      "   (0.1781920357567495, 0.10911999143814011)\n",
      "   (0.1385609728303219, 0.35420910791342736)\n",
      "   (0.1868135839017539, 0.16635171867036677)\n",
      "   (0.21302131449630532, 0.12293104089091628)\n",
      "   (0.18477524386150065, 0.37054274967846995)\n",
      "   (0.11841637532994409, 0.24703559796403654)\n",
      "   (1.0387554178518783, 0.17227760999408204)\n",
      "   (0.9821845605288893, 0.24461858532537373)\n",
      "   (0.8568964911652697, 0.32143224188050806)\n",
      "   (0.6208402875868916, 0.4500555421204621)\n",
      "   (0.9781499758195967, 0.31121595839521415)\n",
      "   (0.844308715138893, 0.37448862735124394)\n",
      "   (1.0441323692094533, 0.16521210921357515)\n",
      "   (0.9883656438719327, 0.24569524865892953)\n",
      "   (0.8314936344061226, 0.31013436658792537)\n",
      "resampling: unique samples 512 out of 1024\n",
      "altar: iteration: 14, beta: 0.05348070696576031, scaling: 0.3964409722222222\n",
      "altar: stats(accepted/invalid/rejected): (6574, 0, 13906)\n",
      "altar: step\n",
      "  β: 0.05348070696576031\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.13152920253183584, 0.10725554807183481)\n",
      "   (0.07338689930876718, 0.36264835928327543)\n",
      "   (0.23082772598449525, 0.23063296246212522)\n",
      "   (0.17946613854800933, 0.09409208001455331)\n",
      "   (0.1533779965070168, 0.3407881037249236)\n",
      "   (0.18058033187895184, 0.15474034216921206)\n",
      "   (0.21250933188587956, 0.10118555010095184)\n",
      "   (0.18699846288442348, 0.3397130881061431)\n",
      "   (0.1376495505740777, 0.22300381995205912)\n",
      "   (1.044109596680813, 0.15442874193748782)\n",
      "   (0.9768854634967494, 0.23602394064917845)\n",
      "   (0.8853554188807907, 0.28728897868539416)\n",
      "   (0.6388475079020838, 0.4604487873065888)\n",
      "   (0.9965472640263077, 0.2857383479290972)\n",
      "   (0.8976351518994171, 0.35000298382849676)\n",
      "   (1.0364729780667006, 0.15265713166430092)\n",
      "   (0.9846529249223352, 0.22372169726558633)\n",
      "   (0.8677540449484447, 0.2848018202990661)\n",
      "resampling: unique samples 518 out of 1024\n",
      "altar: iteration: 15, beta: 0.07714368929161629, scaling: 0.47708333333333336\n",
      "altar: stats(accepted/invalid/rejected): (8432, 0, 12048)\n",
      "altar: step\n",
      "  β: 0.07714368929161629\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.13914996602648633, 0.09199077570398029)\n",
      "   (0.09680796805254334, 0.3208041501002133)\n",
      "   (0.21944119836197282, 0.1944550272929473)\n",
      "   (0.177452326862454, 0.07628698296403094)\n",
      "   (0.1656705873559058, 0.32889896815515823)\n",
      "   (0.17395723649682532, 0.13901854599955096)\n",
      "   (0.20410349645258785, 0.08842164054212283)\n",
      "   (0.17208639551712987, 0.32067362831192187)\n",
      "   (0.14847538850159814, 0.20151852430892084)\n",
      "   (1.0345469173493553, 0.13546268702246214)\n",
      "   (0.9762572792581397, 0.1965478354933651)\n",
      "   (0.9150160214616044, 0.27162950013221493)\n",
      "   (0.6679938581495382, 0.4655732632129245)\n",
      "   (1.013079700453314, 0.2692614159095638)\n",
      "   (0.9083960913798599, 0.3398743700080908)\n",
      "   (1.0335686547656404, 0.1339789330641593)\n",
      "   (0.9811960069914254, 0.20504337731015027)\n",
      "   (0.9088944308247011, 0.27065168134779705)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "resampling: unique samples 514 out of 1024\n",
      "altar: iteration: 16, beta: 0.11036651647711809, scaling: 0.40338541666666666\n",
      "altar: stats(accepted/invalid/rejected): (6734, 0, 13746)\n",
      "altar: step\n",
      "  β: 0.11036651647711809\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.14894926437343936, 0.07788665252689668)\n",
      "   (0.11477022743281758, 0.296821703215721)\n",
      "   (0.21010451077374895, 0.17045483274498816)\n",
      "   (0.1727997400855307, 0.0650616962555598)\n",
      "   (0.1525789833438947, 0.3053539417922836)\n",
      "   (0.1764787912690823, 0.11921456956349723)\n",
      "   (0.19989735027961386, 0.0786030608469442)\n",
      "   (0.1865869474152982, 0.29551780740667316)\n",
      "   (0.14380581815828342, 0.18284525490182058)\n",
      "   (1.0213451069014086, 0.12266449590344425)\n",
      "   (0.9822318218664775, 0.18398241098569063)\n",
      "   (0.9430378835119134, 0.251348147663664)\n",
      "   (0.6842607074388799, 0.435387786623932)\n",
      "   (1.0444204329849118, 0.25020917072318877)\n",
      "   (0.9398400009072985, 0.3404641416975912)\n",
      "   (1.0343929510471117, 0.12058682682300392)\n",
      "   (0.9652801102373221, 0.1775427642999127)\n",
      "   (0.9327500006479859, 0.24230265696566686)\n",
      "resampling: unique samples 516 out of 1024\n",
      "altar: iteration: 17, beta: 0.1592963580708766, scaling: 0.47291666666666665\n",
      "altar: stats(accepted/invalid/rejected): (8336, 0, 12144)\n",
      "altar: step\n",
      "  β: 0.1592963580708766\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1513671068205729, 0.06724144133541839)\n",
      "   (0.1265539855974153, 0.2651339721949274)\n",
      "   (0.21331698001917954, 0.15131077011594612)\n",
      "   (0.1712664850991973, 0.05671589624341472)\n",
      "   (0.15256651010572966, 0.27575199626745805)\n",
      "   (0.17317491137964092, 0.10469974604820435)\n",
      "   (0.2007277481692695, 0.07013278746566516)\n",
      "   (0.17998126937417497, 0.27030133172379545)\n",
      "   (0.15968593335940406, 0.16143197168890017)\n",
      "   (1.0134256796605388, 0.1090579579361102)\n",
      "   (0.9914255182649638, 0.16268288590741078)\n",
      "   (0.9454802733222, 0.23024448249826815)\n",
      "   (0.7053751036916435, 0.42778797593308365)\n",
      "   (1.0399216269243805, 0.23649147338748827)\n",
      "   (0.9634230591086003, 0.30902356293965755)\n",
      "   (1.0301903299989454, 0.11431203072951018)\n",
      "   (0.9687016655674875, 0.16909734128996434)\n",
      "   (0.9487609231670054, 0.22402927935395797)\n",
      "resampling: unique samples 507 out of 1024\n",
      "altar: iteration: 18, beta: 0.22907476035099383, scaling: 0.40598958333333335\n",
      "altar: stats(accepted/invalid/rejected): (6794, 0, 13686)\n",
      "altar: step\n",
      "  β: 0.22907476035099383\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1497655870257825, 0.060570287393419915)\n",
      "   (0.13724080740348285, 0.23597152413387115)\n",
      "   (0.20261683556529747, 0.13711769935422435)\n",
      "   (0.1764675309589893, 0.0459331047210068)\n",
      "   (0.16428727237997515, 0.24465986840296153)\n",
      "   (0.17597334305576637, 0.08944156594554839)\n",
      "   (0.19636948332339402, 0.060675442816717134)\n",
      "   (0.1696346497813564, 0.23175139339015105)\n",
      "   (0.16059248880438862, 0.13817831323763666)\n",
      "   (1.015565331706598, 0.10121624396568135)\n",
      "   (0.9895848761161357, 0.1502743582947559)\n",
      "   (0.9658690543844358, 0.20822076483411317)\n",
      "   (0.723384301943037, 0.41506006794918643)\n",
      "   (1.0375321069528722, 0.21688779327116986)\n",
      "   (0.9730377141604777, 0.2846653436883489)\n",
      "   (1.0196962705375652, 0.09798714356781642)\n",
      "   (0.9804853936756506, 0.14705606001359925)\n",
      "   (0.9483503801918871, 0.1967513733131048)\n",
      "resampling: unique samples 511 out of 1024\n",
      "altar: iteration: 19, beta: 0.3262113405467686, scaling: 0.4670138888888889\n",
      "altar: stats(accepted/invalid/rejected): (8200, 0, 12280)\n",
      "altar: step\n",
      "  β: 0.3262113405467686\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.15185678347755993, 0.05060993969381035)\n",
      "   (0.1453421150431061, 0.21105151983581874)\n",
      "   (0.19673536790658305, 0.11952660977750759)\n",
      "   (0.17901682468279048, 0.0397760207611078)\n",
      "   (0.15245587494238566, 0.21533881510107708)\n",
      "   (0.1806195867692646, 0.07647238849606094)\n",
      "   (0.1920441592762922, 0.05157295024723066)\n",
      "   (0.16711277269664013, 0.21281055864677897)\n",
      "   (0.17074975951467475, 0.12187868083683141)\n",
      "   (1.0029508015587107, 0.08599323157140087)\n",
      "   (0.99926199850367, 0.12612933202211346)\n",
      "   (0.9760074024923344, 0.19118870897656312)\n",
      "   (0.776412732501422, 0.3770757116705103)\n",
      "   (1.0202694404576218, 0.19583455680972764)\n",
      "   (0.9753819532818221, 0.2655343419573896)\n",
      "   (1.0161631733619474, 0.08396195401951845)\n",
      "   (0.9770092335341335, 0.12506407684499837)\n",
      "   (0.9663050112761973, 0.1796296438176814)\n",
      "resampling: unique samples 513 out of 1024\n",
      "altar: iteration: 20, beta: 0.4616428610968681, scaling: 0.4197482638888889\n",
      "altar: stats(accepted/invalid/rejected): (7111, 0, 13369)\n",
      "altar: step\n",
      "  β: 0.4616428610968681\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.15658238982037118, 0.04491353276280612)\n",
      "   (0.14847260037289042, 0.18613158272994423)\n",
      "   (0.19530917451056745, 0.10310771067530185)\n",
      "   (0.17473232665048113, 0.03583408574646477)\n",
      "   (0.17423119875989154, 0.20428040084614266)\n",
      "   (0.17399441688417058, 0.07104472501685932)\n",
      "   (0.18835988541974408, 0.046895612406469916)\n",
      "   (0.1700550488952009, 0.18549388724968477)\n",
      "   (0.16721181899533638, 0.10588745633148301)\n",
      "   (1.0073600591215546, 0.07853088533910867)\n",
      "   (0.985305865662972, 0.11200064603776572)\n",
      "   (0.9692099173549931, 0.16346442730527574)\n",
      "   (0.7913203180778083, 0.36309340478990865)\n",
      "   (1.0304493885500587, 0.1687926980528447)\n",
      "   (0.9881189339129307, 0.2294279633052455)\n",
      "   (1.0047013417599664, 0.07568091070228987)\n",
      "   (0.9825832862574454, 0.11061571665072299)\n",
      "   (0.9748292546517628, 0.1627593083768032)\n",
      "resampling: unique samples 509 out of 1024\n",
      "altar: iteration: 21, beta: 0.6554514311019954, scaling: 0.45503472222222224\n",
      "altar: stats(accepted/invalid/rejected): (7924, 0, 12556)\n",
      "altar: step\n",
      "  β: 0.6554514311019954\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.16040883500604344, 0.04034474031412154)\n",
      "   (0.15389195242829853, 0.15645671400964686)\n",
      "   (0.19197638534303693, 0.0875318256396635)\n",
      "   (0.17328748479437378, 0.029775172667516458)\n",
      "   (0.17017691363255538, 0.17748977195444668)\n",
      "   (0.1764150477571, 0.06050428999680524)\n",
      "   (0.18714313239821267, 0.04228505110494634)\n",
      "   (0.1745059176393881, 0.16162499124527255)\n",
      "   (0.16161578755401676, 0.0886227661468199)\n",
      "   (1.000110870619611, 0.06820325198215178)\n",
      "   (0.9899695990771122, 0.0992681391607376)\n",
      "   (0.9759927944554293, 0.14205142762063955)\n",
      "   (0.8174158491168096, 0.3357317511312386)\n",
      "   (1.0233295994115958, 0.15810963490561597)\n",
      "   (0.9944946938410996, 0.20277367726566098)\n",
      "   (1.0006625790442354, 0.06752596674664138)\n",
      "   (0.98778045820503, 0.09886901972113725)\n",
      "   (0.9658669462661723, 0.1440808019711349)\n",
      "resampling: unique samples 501 out of 1024\n",
      "altar: iteration: 22, beta: 0.9345357719093792, scaling: 0.4262152777777778\n",
      "altar: stats(accepted/invalid/rejected): (7260, 0, 13220)\n",
      "altar: step\n",
      "  β: 0.9345357719093792\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1641324728740856, 0.03533545429106574)\n",
      "   (0.15619156069876738, 0.13974150432442384)\n",
      "   (0.18879702304967252, 0.07582820394256325)\n",
      "   (0.173233629078967, 0.023460671413238068)\n",
      "   (0.17222158448424607, 0.14742116304821443)\n",
      "   (0.17370628363744378, 0.050980701329958744)\n",
      "   (0.1846954983570144, 0.03623319484701007)\n",
      "   (0.1668263679343938, 0.1467597003599463)\n",
      "   (0.16903093678670575, 0.081227746415758)\n",
      "   (0.9965645961926919, 0.05915012461346054)\n",
      "   (0.9915504069330998, 0.08641783053395871)\n",
      "   (0.981467761027237, 0.131573647832138)\n",
      "   (0.8609502109304281, 0.32382076155252054)\n",
      "   (1.0100122148790713, 0.14413952026430243)\n",
      "   (0.9861543946899872, 0.18741978657832256)\n",
      "   (0.9962821799498743, 0.05808766968601582)\n",
      "   (0.98722792935248, 0.08471812750417514)\n",
      "   (0.9762781359391332, 0.12746228495625403)\n",
      "resampling: unique samples 641 out of 1024\n",
      "altar: iteration: 23, beta: 1.0, scaling: 0.45303819444444443\n",
      "altar: stats(accepted/invalid/rejected): (7878, 0, 12602)\n",
      "altar: step\n",
      "  β: 1.0\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1656482811525837, 0.0336925705251227)\n",
      "   (0.15286536378727797, 0.13798873008285867)\n",
      "   (0.1897899353182844, 0.07609184297577347)\n",
      "   (0.17433196069187012, 0.023617954560353774)\n",
      "   (0.1661300178223966, 0.14621649063422865)\n",
      "   (0.1756237736758064, 0.0503495196557259)\n",
      "   (0.18257210168135202, 0.03408649776768381)\n",
      "   (0.1709503327365636, 0.14294560508139073)\n",
      "   (0.16930620161521273, 0.07655422134985308)\n",
      "   (0.9949989468314373, 0.05903949913806912)\n",
      "   (0.989503438902692, 0.08573012494242761)\n",
      "   (0.9792930441344794, 0.1322652334846431)\n",
      "   (0.8690357684828713, 0.3091682864910447)\n",
      "   (1.0146286334405816, 0.1423374818223276)\n",
      "   (0.9878614192548045, 0.19028752780878203)\n",
      "   (0.9977545889436173, 0.05684572580884658)\n",
      "   (0.9822561612798978, 0.08225958834531748)\n",
      "   (0.9753218910113398, 0.12473799506775192)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "altar: step\n",
      "  β: 1.0\n",
      "  θ: (1024 samples) x (18 parameters)\n",
      "  parameters (mean, sd):\n",
      "   (0.1656482811525837, 0.0336925705251227)\n",
      "   (0.15286536378727797, 0.13798873008285867)\n",
      "   (0.1897899353182844, 0.07609184297577347)\n",
      "   (0.17433196069187012, 0.023617954560353774)\n",
      "   (0.1661300178223966, 0.14621649063422865)\n",
      "   (0.1756237736758064, 0.0503495196557259)\n",
      "   (0.18257210168135202, 0.03408649776768381)\n",
      "   (0.1709503327365636, 0.14294560508139073)\n",
      "   (0.16930620161521273, 0.07655422134985308)\n",
      "   (0.9949989468314373, 0.05903949913806912)\n",
      "   (0.989503438902692, 0.08573012494242761)\n",
      "   (0.9792930441344794, 0.1322652334846431)\n",
      "   (0.8690357684828713, 0.3091682864910447)\n",
      "   (1.0146286334405816, 0.1423374818223276)\n",
      "   (0.9878614192548045, 0.19028752780878203)\n",
      "   (0.9977545889436173, 0.05684572580884658)\n",
      "   (0.9822561612798978, 0.08225958834531748)\n",
      "   (0.9753218910113398, 0.12473799506775192)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create an instance\n",
    "myapp = LinearApp(name='linear')\n",
    "# call initialize method to prepare its compone\n",
    "myapp.initialize()\n",
    "# to sample the posterior with CATMIP alogorithm\n",
    "myapp.model.posterior(application=myapp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some preocess information is shown to help users monitoring the annealing procedure, e.g.,   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Show the statistics of the final results\n",
    "The states of MCMC simulations are stored in a 'step' object. We can extrat theta, prior/data (likelihood)/posterior as well as other simulation information for 'step' and perform further analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "beta = 1.0\n",
      "samples = 1024\n",
      "parameters = 18\n"
     ]
    }
   ],
   "source": [
    "# to obtain the final step data\n",
    "step=myapp.controller.worker.step\n",
    "print('beta =', step.beta)\n",
    "print('samples =', step.samples)\n",
    "print('parameters =', step.parameters)\n",
    "# to obtain theta matrix dim(samples, parameters)\n",
    "theta = step.theta\n",
    "mean_model, sd = theta.mean_sd(axis=0) # axis=0 for averaging over samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(108, 18)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = myapp.model\n",
    "model.green\n",
    "model.G.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Show the posterior distribution as a histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.mlab as mlab\n",
    "import matplotlib.pyplot as plt\n",
    "posterior = step.posterior\n",
    "num_bins = 2**6\n",
    "n, bins, patches = plt.hist(posterior, num_bins, facecolor='blue', alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Output\n",
    "The default archiver of AlTar saves step information in `results/step_nnn.h5` (HDF5) files for step=nnn. You may use `h5py` package to read progress data. For example, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list of datasets ['Annealer', 'Bayesian', 'ParameterSets']\n",
      "list of datasets in Bayesian ['likelihood', 'posterior', 'prior']\n",
      "the dimension of posterior is the number of samples 1024\n",
      "the list of parameter sets in ParameterSets ['theta']\n",
      "the dimension of theta is (samples, parameter):  (1024, 18)\n"
     ]
    }
   ],
   "source": [
    "import h5py\n",
    "import numpy \n",
    "# open the final step h5 file in read mode\n",
    "h5file = h5py.File('results/step_final.h5', 'r') \n",
    "# show the root datasets \n",
    "print(\"list of datasets\", list(h5file.keys()))\n",
    "# show the datasets in Bayesian\n",
    "print(\"list of datasets in Bayesian\", list(h5file.get('Bayesian').keys()))\n",
    "# get the posterior, vector (samples)\n",
    "posterior = numpy.asarray(h5file.get('Bayesian/posterior'))\n",
    "print(\"the dimension of posterior is the number of samples\", posterior.size)\n",
    "# show the datasets in ParameterSets\n",
    "print(\"the list of parameter sets in ParameterSets\", list(h5file.get('ParameterSets').keys()))\n",
    "# get theta, a matrix(samples, parameters)\n",
    "theta = numpy.asarray(h5file.get('ParameterSets/theta'))\n",
    "print(\"the dimension of theta is (samples, parameter): \", theta.shape)\n",
    "# close h5file when all done\n",
    "h5file.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Play with other configurations\n",
    "If you would like to run linear model with other configurations, edit the 'linear.pfg' file and use Kernel->\"Restart & Run All\" to re-run the program."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
